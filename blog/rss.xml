<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>FLAML Blog</title>
        <link>https://microsoft.github.io/FLAML/blog</link>
        <description>FLAML Blog</description>
        <lastBuildDate>Sun, 07 May 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Surpassing 1 Million Downloads - A Retrospective and a Look into the Future]]></title>
            <link>https://microsoft.github.io/FLAML/blog/2023/05/07/1M-milestone</link>
            <guid>Surpassing 1 Million Downloads - A Retrospective and a Look into the Future</guid>
            <pubDate>Sun, 07 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[TL;DR:]]></description>
            <content:encoded><![CDATA[<p><strong>TL;DR:</strong></p><ul><li><strong>Celebrating FLAML&#x27;s milestone: 1 million downloads</strong></li><li><strong>Introducing Large Language Model (LLM) support in the upcoming FLAML v2</strong></li></ul><p>This week, FLAML has reached a significant milestone: 1 million downloads. Originating as an intern research project within Microsoft Research, FLAML has grown into an open-source library used widely across the industry and supported by an active community.
As we celebrate this milestone, we want to recognize the passionate contributors and users who have played an essential role in molding FLAML into the flourishing project it is today. Our heartfelt gratitude goes out to each of you for your unwavering support, constructive feedback, and innovative contributions that have driven FLAML to new heights.
A big shoutout to our industrial collaborators from Azure Core, Azure Machine Learning, Azure Synapse Analytics, Microsoft 365, ML.NET, Vowpal Wabbit, Anyscale, Databricks, and Wise; and academic collaborators from MIT, Penn State University, Stevens Institute of Technology, Tel Aviv University, Texas A &amp; M University, University of Manchester, University of Washington, and The Chinese University of Hong Kong etc.</p><p>We&#x27;d also like to take the opportunity to reflect on FLAML&#x27;s past achievements and its future roadmap, with a particular focus on large language models (LLM) and LLMOps.</p><h2>FLAML&#x27;s Journey: Past Achievements and Milestones</h2><h3>Bring AutoML to One&#x27;s Fingertips</h3><p>FLAML offers an off-the-shelf AutoML solution that enables users to quickly discover high-quality models or configurations for common ML/AI tasks. By automatically selecting models and hyperparameters for training or inference, FLAML saves users time and effort. FLAML has significantly reduced development time for developers and data scientists alike, while also providing a convenient way to integrate new algorithms into the pipeline, enabling easy extensions and large-scale parallel tuning. These features make FLAML a valuable tool in R&amp;D efforts for many enterprise users.
FLAML is capable of handling a variety of common ML tasks, such as <a href="https://microsoft.github.io/FLAML/docs/Examples/AutoML-Classification">classification</a>, <a href="https://microsoft.github.io/FLAML/docs/Examples/AutoML-Regression">regression</a>, <a href="https://microsoft.github.io/FLAML/docs/Examples/AutoML-Time%20series%20forecast">time series forecasting</a>, <a href="https://microsoft.github.io/FLAML/docs/Examples/AutoML-Rank">NLP tasks</a>, and <a href="https://microsoft.github.io/FLAML/docs/Use-Cases/Auto-Generation">generative tasks</a>, providing a comprehensive solution for various applications.</p><h3>Speed and Efficiency: The FLAML Advantage</h3><p>What sets FLAML apart from other AutoML libraries is its exceptional efficiency, thanks to the economical and efficient hyperparameter optimization and model selection methods developed in our <a href="https://microsoft.github.io/FLAML/docs/Research">research</a>. FLAML is also capable of handling large search spaces with heterogeneous evaluation costs, complex constraints, guidance, and early stopping. The <a href="https://microsoft.github.io/FLAML/docs/Use-Cases/Zero-Shot-AutoML">zero-shot AutoML</a> option further reduces the cost of AutoML, making FLAML an even more attractive solution for a wide range of applications with low resources.</p><h3>Easy Customization and Extensibility</h3><p>FLAML is designed for easy extensibility and customization, allowing users to add custom learners, metrics, search space, etc. For example, the support of hierarchical search spaces allows one to first choose an ML learner and then sampling from the hyperparameter space specific to that learner. The level of customization ranges from minimal (providing only training data and task type as input) to full (tuning a user-defined function). This flexibility and support for easy customization have led to FLAML&#x27;s adoption in various domains, including security, finance, marketing, engineering, supply chain, insurance, and healthcare, delivering highly accurate results.</p><h2>Embracing Large Language Models in FLAML v2</h2><p>As large language models continue to reshape the AI ecosystem, FLAML is poised to adapt and grow alongside these advancements. Recognizing the importance of large language models, we have recently incorporated an autogen package into FLAML, and are committed to focusing our collective efforts on addressing the unique challenges that arise in LLMOps (Large Language Model Operations).</p><p>In its current iteration, FLAML offers support for model selection and inference parameter tuning for large language models. We are actively working on the development of new features, such as LLM selection, inference hyperparameter tuning for LLM, and agent-based LLM operations, to further expand FLAML&#x27;s capabilities.</p><p>We are eagerly preparing for the launch of FLAML v2, where we will place special emphasis on incorporating and enhancing features specifically tailored for large language models (LLMs), further expanding FLAML&#x27;s capabilities.
We invite contributions from anyone interested in this topic and look forward to collaborating with the community as we shape the future of FLAML and LLMOps together.</p><h2>For Further Reading</h2><ul><li><a href="/docs/Use-Cases/Auto-Generation">Documentation about <code>flaml.autogen</code></a></li><li><a href="https://github.com/microsoft/FLAML/blob/main/notebook/autogen_chatgpt_gpt4.ipynb">Code Example: Tune chatGPT for Math Problem Solving with FLAML</a></li></ul><p><em>Do you have any experience to share about LLM applications? Do you like to see more support or research of LLMOps? Please join our <a href="https://discord.gg/Cppx2vSPVP">Discord</a> server for discussion.</em></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Does Model and Inference Parameter Matter in LLM Applications? - A Case Study for MATH]]></title>
            <link>https://microsoft.github.io/FLAML/blog/2023/04/21/LLM-tuning-math</link>
            <guid>Does Model and Inference Parameter Matter in LLM Applications? - A Case Study for MATH</guid>
            <pubDate>Fri, 21 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[level 2 algebra]]></description>
            <content:encoded><![CDATA[<p><img src="img/level2algebra.png" alt="level 2 algebra"/></p><p><strong>TL;DR:</strong></p><ul><li><strong>A case study using the MATH benchmark shows that model selection and inference parameters do matter in Large Language Model (LLM) applications.</strong></li><li><strong>The tuned gpt-3.5-turbo model vastly outperformed untuned gpt-4 in accuracy for easier problems, while gpt-4 was a better choice for the most difficult problems.</strong></li><li><strong>FLAML can help with model selection, parameter tuning, and cost-saving in LLM applications.</strong></li></ul><p>Large language models (LLMs) are powerful tools that can generate natural language texts for various applications, such as chatbots, summarization, translation, and more. GPT-4 is currently the state of the art LLM in the world. Is model selection irrelevant? What about inference parameters?</p><p>In this blog post, we will explore how model and inference parameter matter in LLM applications, using a case study for <a href="https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html">MATH</a>, a benchmark for evaluating LLMs on advanced mathematical problem solving. MATH consists of 12K math competition problems from AMC-10, AMC-12 and AIME. Each problem is accompanied by a step-by-step solution.</p><p>We will use the new subpackage <a href="docs/Use-Cases/Auto-Generation"><code>flaml.autogen</code></a> to automatically find the best model and inference parameter for LLMs on a given task and dataset given an inference budget, using a novel low-cost search &amp; pruning strategy. FLAML currently supports all the LLMs from OpenAI, such as GPT-3.5 and GPT-4.</p><p>We will use FLAML to perform model selection and inference parameter tuning. Then we compare the performance and inference cost on solving algebra problems with the untuned gpt-4. We will also analyze how different difficulty levels affect the results.</p><h2>Experiment Setup</h2><p>We use FLAML to select between the following models with a target inference budget $0.02 per instance:</p><ul><li>gpt-3.5-turbo, a relatively cheap model that powers the popular ChatGPT app</li><li>gpt-4, the state of the art LLM that costs more than 100 times of gpt-3.5-turbo</li></ul><p>We adapt the models using 20 examples in the train set, using the problem statement as the input and generating the solution as the output. We use the following inference parameters:</p><ul><li>temperature: The parameter that controls the randomness of the output text. A higher temperature means more diversity but less coherence. We search for the optimal temperature in the range of <!-- -->[0, 1]<!-- -->.</li><li>top_p: The parameter that controls the probability mass of the output tokens. Only tokens with a cumulative probability less than or equal to top-p are considered. A lower top-p means more diversity but less coherence. We search for the optimal top-p in the range of <!-- -->[0, 1]<!-- -->.</li><li>max_tokens: The maximum number of tokens that can be generated for each output. We search for the optimal max length in the range of <!-- -->[50, 1000]<!-- -->.</li><li>n: The number of responses to generate. We search for the optimal n in the range of <!-- -->[1, 100]<!-- -->.</li><li>prompt: We use the template: &quot;{problem} Solve the problem carefully. Simplify your answer as much as possible. Put the final answer in <!-- -->\<!-- -->boxed{{}}.&quot; where {problem} will be replaced by the math problem instance.</li></ul><p>In this experiment, when n &gt; 1, we find the answer with highest votes among all the responses and then select it as the final answer to compare with the ground truth. For example, if n = 5 and 3 of the responses contain a final answer 301 while 2 of the responses contain a final answer 159, we choose 301 as the final answer. This can help with resolving potential errors due to randomness. We use the average accuracy and average inference cost as the metric to evaluate the performance over a dataset. The inference cost of a particular instance is measured by the price per 1K tokens and the number of tokens consumed.</p><h2>Experiment Results</h2><p>The first figure in this blog post shows the average accuracy and average inference cost of each configuration on the level 2 Algebra test set.</p><p>Surprisingly, the tuned gpt-3.5-turbo model is selected as a better model and it vastly outperforms untuned gpt-4 in accuracy (92% vs. 70%) with equal or 2.5 times higher inference budget.
The same observation can be obtained on the level 3 Algebra test set.</p><p><img src="img/level3algebra.png" alt="level 3 algebra"/></p><p>However, the selected model changes on level 4 Algebra.</p><p><img src="img/level4algebra.png" alt="level 4 algebra"/></p><p>This time gpt-4 is selected as the best model. The tuned gpt-4 achieves much higher accuracy (56% vs. 44%) and lower cost than the untuned gpt-4.
On level 5 the result is similar.</p><p><img src="img/level5algebra.png" alt="level 5 algebra"/></p><p>We can see that FLAML has found different optimal model and inference parameters for each subset of a particular level, which shows that these parameters matter in cost-sensitive LLM applications and need to be carefully tuned or adapted.</p><p>An example notebook to run these experiments can be found at: <a href="https://github.com/microsoft/FLAML/blob/v1.2.1/notebook/autogen_chatgpt.ipynb">https://github.com/microsoft/FLAML/blob/v1.2.1/notebook/autogen_chatgpt.ipynb</a></p><h2>Analysis and Discussion</h2><p>While gpt-3.5-turbo demonstrates competitive accuracy with voted answers in relatively easy algebra problems under the same inference budget, gpt-4 is a better choice for the most difficult problems. In general, through parameter tuning and model selection, we can identify the opportunity to save the expensive model for more challenging tasks, and improve the overall effectiveness of a budget-constrained system.</p><p>There are many other alternative ways of solving math problems, which we have not covered in this blog post. When there are choices beyond the inference parameters, they can be generally tuned via <a href="docs/Use-Cases/Tune-User-Defined-Function"><code>flaml.tune</code></a>.</p><p>The need for model selection, parameter tuning and cost saving is not specific to the math problems. The <a href="https://github.com/Significant-Gravitas/Auto-GPT">Auto-GPT</a> project is an example where high cost can easily prevent a generic complex task to be accomplished as it needs many LLM inference calls.</p><h2>For Further Reading</h2><ul><li><a href="https://arxiv.org/abs/2303.04673">Research paper about the tuning technique</a></li><li><a href="/docs/Use-Cases/Auto-Generation">Documentation about <code>flaml.autogen</code></a></li></ul><p><em>Do you have any experience to share about LLM applications? Do you like to see more support or research of LLM optimization or automation? Please join our <a href="https://discord.gg/Cppx2vSPVP">Discord</a> server for discussion.</em></p>]]></content:encoded>
        </item>
    </channel>
</rss>